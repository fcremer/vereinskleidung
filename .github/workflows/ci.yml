# .github/workflows/ci.yml
name: CI & Docker Publish

on:
  push:
    branches: [ "main" ]          # deploy on main
    tags:     [ "v*.*.*" ]        # or on version tags
  pull_request:                   # Tests für alle PRs

jobs:
  ######################################################################
  # 1) Quality Gate – Lint + Tests
  ######################################################################
  test:
    name: "Lint & Test (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8

      - name: Lint (flake8)
        run: flake8 app --max-line-length=120

      - name: Run unit tests
        run: pytest -q

  ######################################################################
  # 2) Build & Push Docker image  (nur wenn Tests OK)
  ######################################################################
  docker:
    name: "Build & Push Docker"
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Erzeugt sinnvolle Tags: latest, sha, version-Tag …
      - name: Extract metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/vereinshop

      # Multi-Arch-Build (linux/amd64 + linux/arm64) und Push
      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Post-build summary
        run: echo "✅ Image(s) pushed: ${{ steps.meta.outputs.tags }}"